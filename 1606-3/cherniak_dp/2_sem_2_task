#include <omp.h>
#include <iostream>

#define Eps (0.000000000001)
using namespace std;

double func2(double x, double y)
{
	return x*y*y;
}

double func1(double x, double y)
{
	return (x*x*y - x) / sqrt(x + y*y*x);
}

double Step1(double(*f)(double, double), double a, double b, int N, double fixX)
{
	double h = (b - a) / N;

	double S4 = f(fixX, a + h), S2 = 0.;

	for (int i = 3; i < N; i += 2)
	{
		S4 += f(fixX, a + i*h);
		S2 += f(fixX, a + (i - 1)*h);
	}

	return (h / 3) * (f(fixX, a) + 4 * S4 + 2 * S2 + f(fixX, b));
}
/*
double Step1_parallel(double(*f)(double, double), double a, double b, int N, double fixX)
{
	double h = (b - a) / N;

	double S4 = f(fixX, a + h), S2 = 0.;
		int i = 0;
	#pragma omp parallel for shared(a, b, N, h) private(i) reduction(+:S4,S2)

	for (int i = 3; i < N; i += 2)
	{
		S4 += f(fixX, a + i*h);
		S2 += f(fixX, a + (i - 1)*h);
	}

	return (h / 3) * (f(fixX, a) + 4 * S4 + 2 * S2 + f(fixX, b));
}*/

double Step2(double(*F)(double, double), double a1, double b1, double a2, double b2, int n)
{
	if (n <= 0)
		return 0.;

	if (abs(a1 - b1) < Eps || abs(a2 - b2) < Eps)
		return 0.;


	int N = 2 * n;

	double h2 = (b2 - a2) / N;

	double I2 = 0., I3 = 0.;

	for (int j = 1; j < N; ++j)
	{
		if (j % 2 == 1)
			I3 += Step1(F, a1, b1, N, a2 + j*h2);
		else
			I2 += Step1(F, a1, b1, N, a2 + j*h2);
	}

	return (h2 / 3) * (Step1(F, a1, b1, N, a2) + 2 * I2 + 4 * I3 + Step1(F, a1, b1, N, b2));
}

double Step2_parallel(double(*F)(double, double), double a1, double b1, double a2, double b2, int n)
{
	if (n <= 0)
		return 0.;

	if (abs(a1 - b1) < Eps || abs(a2 - b2) < Eps)
		return 0.;

	int N = 2 * n;

	double h2 = (b2 - a2) / N;

	double I2 = 0., I3 = 0.;

	int j = 0;
#pragma omp parallel for shared(a1, b1, a2, N, h2) private(j) reduction(+:I3,I2)
	for (j = 1; j < N; ++j)
	{
		if (j % 2 == 1)
			I3 += Step1(F, a1, b1, N, a2 + j*h2);
		else
			I2 += Step1(F, a1, b1, N, a2 + j*h2);
	}

	return  (h2 / 3) * (Step1(F, a1, b1, N, a2) + 2 * I2 + 4 * I3 + Step1(F, a1, b1, N, b2));
}

void main(int argc, char* argv[])
{
	double t1 = 0., t2 = 0., parallTime = 0., sequentTime = 0.;
	double Sequent = 0., Parallel = 0.;
	int n = 10000;

	t1 = omp_get_wtime();
	Sequent = Step2(&func1, 1, 2, 2, 3, n);
	t2 = omp_get_wtime();
	sequentTime = (t2 - t1) * 1000.;

	cout << "Simpson integrate SEQUENT = " << Sequent << endl;
	cout << " time = " << sequentTime << "ms"<<endl;


	t1 = omp_get_wtime();
	Parallel = Step2_parallel(&func1, 1, 2, 2, 3, n);
	t2 = omp_get_wtime();
	parallTime = (t2 - t1) * 1000.;

	cout << "Simpson integrate PARALLEL = " << Parallel<<endl;
	cout << " time = " << parallTime << "ms"<<endl;

	cout << "SpeedUp = " << sequentTime / parallTime<<endl;
	system("pause");
	return;
}
